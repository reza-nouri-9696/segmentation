# -*- coding: utf-8 -*-
"""dataset_unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7e61t4qXJhzxXbjM0XTBoILLwGDq2LE
"""

import argparse
import torch
import matplotlib.pyplot as plt
from torchvision import transforms
from model import VAEnet
from PIL import Image

def test(test_image_path, model_path, output_path):
    device = 'cuda' if torch.cuda.is_available() else 'cpu'

    # Load pre-trained model
    model = VAEnet().float().to(device)
    model.load_state_dict(torch.load(model_path))
    model.eval()

    # Preprocess test image
    myTransformImage = transforms.Compose([
        transforms.ToTensor(),
    ])
    test_image = Image.open(test_image_path)
    test_image = myTransformImage(test_image)
    test_image = test_image.unsqueeze(0)
    test_image = test_image.to(device)

    # Perform inference
    with torch.no_grad():
        output = model(test_image)

    # Visualize results
    output_numpy = output.cpu().numpy()
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))

    # Original image
    axes[0].imshow(test_image.cpu().squeeze().permute(1, 2, 0))
    axes[0].set_title('Original Image')
    axes[0].axis('off')

    # Model output
    axes[1].imshow(output_numpy[0][0], cmap='gray')
    axes[1].set_title('Model Output')
    axes[1].axis('off')

    plt.tight_layout()
    plt.savefig(output_path.replace('.png', '_comparison.png'))
    plt.show()

    # Print model output information
    print("Model Output Information:")
    print("Max value:", output_numpy.max())
    print("Min value:", output_numpy.min())
    print("Mean value:", output_numpy.mean())
    print("Std deviation:", output_numpy.std())

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Test VAE-net model')
    parser.add_argument('--test_image_path', type=str, help='Path to test image')
    parser.add_argument('--model_path', type=str, help='Path to trained model')
    parser.add_argument('--output_path', type=str, help='Path to save output')
    args = parser.parse_args()

    test(args.test_image_path, args.model_path, args.output_path)